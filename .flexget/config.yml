presets:
  global:
    cookies: ~/.flexget/private/cookies.sqlite
    download: ~/Downloads/.

  torrents:
    content_filter:
      require: [ '*.avi', '*.mkv', '*.mp4', '*.rar' ]
    torrent_scrub: on
    torrent_alive: { min_seeds: 5, reject_for: 10 minutes }
    exec:
      on_output:
        for_accepted: |
          growlnotify -t 'FlexGet: torrent from {{task}}' -m \
            '{{ title | re_replace("['']", "") }}' >/dev/null 2>&1
          tmux display-message 'FlexGet: {{task}}: {{
            title | re_replace("['']", "") }}' >/dev/null 2>&1
        phase: |
          # This is also run from cron every few minutes.
          nice -n 20 transmission-watchdog

  private-torrents:
    preset: torrents
    private_torrents: yes

  tv:
    interval: 5 minutes
    content_size: { min: 25, strict: yes }
    manipulate:
      # Remove description field to avoid false matches from series plugin.
      - description: { remove: yes }
    regexp:
      reject:
        # Avoid re-encodes.
        - '(?x) (?:_|\b) (?: afg | msd ) $': { from: title }
    # Run if filter before series filter (prevents extra timeframe waiting).
    plugin_priority: { if: 130 }
    if:
      # Episode is usally a pilot or a preview- reject the latter.
      - '[1, 0] == [series_season, series_episode]':
          regexp:
            reject:
              - '(?x) (?:_|\b) (?: preview | sneak \W+  peak | trailer )
                      (?:_|\b)'
            from: title

  tv-series:
    preset: tv
    series:
      settings:
        tv: &TV_SETTING
          quality: hdtv+ <=720p
          target: <720p
          timeframe: 2 hours
          propers: 12 hours
          specials: no
          path: ~/Media/TV/{{series_name}}/.
        animation:
          << : *TV_SETTING
          path: ~/Media/TV/Animation/{{series_name}}/.
        documentaries:
          << : *TV_SETTING
          path: ~/Media/TV/Documentaries/{{series_name}}/.
        foreign:
          << : *TV_SETTING
          path: ~/Media/TV/Foreign/{{series_name}}/.
        talk_shows:
          << : *TV_SETTING
          path: ~/Media/TV/Talk Shows/{{series_name}}/.
    include: [ private/series.yml ]
    if:
      # Reject season previews or recaps.
      - ? 'has_field("series_season") and has_field("series_episode")
             and 1 < series_season and 0 == series_episode'
        : reject

  # Grab the first episode of any new series.
  tv-premieres:
    preset: tv
    series_premiere:
      << : *TV_SETTING
      allow_seasonless: yes
      path: ~/Media/TV/_NEW_/.
    regexp:
      reject:
        - '(?x) (?:_|\b) (?: au | nz | uk | ufc | sports | championships?
                             | 24(?:h|-7) | bake | baking | world \W+ series )
                (?:_|\b)'
        - '(?x) (?:_|\b) (?: brit(?:ish | ain | annia) | england | australia
                             | kitchen | food | cook )'
        - '(?x) (?:_|\b) (?: pdtv | norwegian | hanrel ) (?:_|\b)':
            from: title
      from: series_name

  movies:
    interval: 30 minutes
    quality: dvdrip+ <720p
    regexp:
      reject:
        - '(?x) [\W_] (?: read[\W_]*nfo | 3-?D(?:BD)? | live\W+at ) (?:_|\b)'
        - ? '(?x) [\W_] (?: dubbed | pldub | cropped | (?:heb|kor|swe)sub
                            | rosubbed )
                  (?:_|\b)'
          : { from: [ title, description ] }
        # Avoid certain groups.
        - '(?x) [\W_] (?: maxspeed | tnt[\W_]*village | cocain | wdr | msd) $'
      from: title
    content_size: { min: 300, max: 2500, strict: yes }
    imdb_lookup: yes
    seen_movies: strict
    if:
      - not has_field('imdb_id'): reject
      - 'imdb_year < now.year - 6': reject
      - ? "sorted(imdb_genres) in [['music'], ['biography', 'music'],
            ['documentary', 'music'], ['biography', 'documentary', 'music']]"
        : reject
      - "'musical' in imdb_genres": reject
      # Probably a standup comedy.
      - "'comedy' in imdb_genres and 1 == len(imdb_actors)": reject
      - "'english' == (imdb_languages or ['english'])[0]":
          set: { path: ~/Media/Movies/. }
          imdb:
            min_score: 6.2
            min_votes: 500
      - "'documentary' in imdb_genres":
          set: { path: ~/Media/Movies/Documentaries/. }
      - "'english' != (imdb_languages or ['english'])[0]":
          set:
            path: ~/Media/Movies/Foreign/{{imdb_languages[0] | capitalize}}/.
          imdb:
            min_score: 6.8
            min_votes: 100
            accept_languages: [
              cantonese, chinese, danish, dutch, french, german, icelandic,
              italian, norwegian, japanese, korean, mandarin, portuguese,
              spanish, swedish ]
          regexp:
            reject_excluding:
              - '(?x) ^ (?: action | adventure | comedy | crime | mystery
                            | sci-fi | thriller | war ) $'
            from: imdb_genres

tasks:
  ###########
  # TV series
  ###########
  btn:
    priority: 2
    include: [ private/btn-rss.yml ]
    preset: [ private-torrents, tv-series ]
    manipulate:
      # Use the scene release name.
      - title: { extract: '.*\[ (.+?) \] *$' }
  xspeeds_tv:
    priority: 3
    include: [ private/xspeeds_tv-rss.yml ]
    preset: [ private-torrents, tv-series ]
  torrentday_tv:
    priority: 4
    include: [ private/torrentday_tv-rss.yml ]
    preset: [ private-torrents, tv-series ]
  thebox:
    # Ratio-based tracker; easy to maintain. UK content.
    priority: 5
    interval: 15 minutes
    rss:
      url: http://thebox.bz/rss.php?feed=dl&cat[]=14&cat[]=18&cat[]=31&cat[]=8
      silent: yes
    preset: [ private-torrents, tv-series ]
    disable_plugin: [ torrent_alive ]
    if: [ "str(now.year) + ')' not in title": reject ]
  bitmetv:
    # Ratio-based tracker; hard to maintain.
    priority: 7
    delay: 10 minutes
    include: [ private/bitmetv-rss.yml ]
    preset: [ private-torrents, tv-series ]

  #####################
  # TV series premieres
  #####################
  btn_premieres:
    priority: 22
    include: [ private/btn-rss.yml ]
    preset: [ private-torrents, tv-premieres ]
    manipulate:
      - year: { from: title, extract: '^[^[]+\[ (\d{4}) \]' }
      # Use the scene release name.
      - title: { extract: '.*\[ (.+?) \] *$' }
      # Series guessing does inadequate name normalization:
      - title: { replace: { regexp: '[\\''"]+', format: '' } }
      - title: { replace: { regexp: '\W+', format: ' ' } }
      # Normalize '&', '&amp;' and 'and'.
      - title: { replace: { regexp: '\s*&(?:amp;)?\s*', format: ' and ' } }
    rss: { other_fields: [ comments ] }
    regexp:
      reject:
        - ? '(?x) \b (?: anime | celebrities | children | cooking | dance
              | dating | fashion | food | gameshow | homeandgarden | lifestyle
              | music | soap | sport ) \b'
          : { from: [ comments ] }
        - '(?x) ^ \W* reality \W* $': { from: [ comments ] }
    if:
      # Accept only the current year, respecting dates near the boundary.
      - ? 'not str(year).isdigit() or int(year) not in
            [(now + timedelta(n)).year for n in (0, -60, 60)]'
        :  reject
  torrentday_tv_premieres:
    priority: 23
    include: [ private/torrentday_tv-rss.yml ]
    preset: [ private-torrents, tv-premieres ]

  ########
  # Movies
  ########
  xspeeds_movies:
    priority: 31
    include: [ private/xspeeds_movies-rss.yml ]
    preset: [ private-torrents, movies ]
    rss: { other_fields: [ author ] }
  ptp:
    priority: 32
    include: [ private/ptp-rss.yml ]
    preset: [ private-torrents, movies ]
  ilt_movies:
    priority: 33
    include: [ private/ilt_movies-rss.yml ]
    preset: [ private-torrents, movies ]
  torrentday_movies:
    priority: 34
    include: [ private/torrentday_movies-rss.yml ]
    preset: [ private-torrents, movies ]
  # Foreign: AsiaTorrents.com and EUTorrents.com
  avistaz:
    priority: 35
    sequence:
      - rss: { url: 'http://feeds.feedburner.com/eutorrentsbt', silent: yes }
      - rss: { url: 'http://feeds.feedburner.com/btavistaz',    silent: yes }
    preset: [ private-torrents, movies ]
    urlrewrite:
      site:
        regexp: '(?x) ^ http:// (?P<host>[^/]+) .*? &id= (?P<id>[^&]+)'
        format: 'http://\g<host>/download.php?id=\g<id>&f=\g<id>.torrent'
    regexp:
      reject_excluding:
        - '(?x) \b english \b': { from: [ title, description ] }
      reject:
        - ? '(?x) \b (?: dubbed  | episodes? | broadcast \W+ network
                         | tv \W+ program | air \W+ (?:date | time) ) \b'
          : { from: [ title, description ] }
