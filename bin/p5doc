#!/usr/bin/env perl
use strict;
use warnings;

{
    package My::Pod::Perldoc;
    our $VERSION = 0;

    eval q{ use parent qw(Pod::Cpandoc); 1 } or do {
        warn "Install Pod::Cpandoc for better results.\n";
        eval q{ use parent qw(Pod::Perldoc) };
    };

    sub searchfor {
        my ($self, $recurse, $s, @dirs) = @_;

        my @parts = split '::', $s;
        for my $parts (reverse 0 .. $#parts) {
            my $s = join '::', @parts[0 .. $parts];
            my @found = $self->SUPER::searchfor($recurse, $s => @dirs);
            return @found if @found;
        }

        # If no module was found, search for a function.
        $self->opt_f($parts[-1]);
        return $self->SUPER::searchfor($recurse, perlfunc => @dirs);
    }

    sub search_perlfunc {
        my($self, $found_things, $pod) = @_;
        if ((my $func = $self->opt_f) =~ s/^CORE::(?:Global::)?//) {
            $self->opt_f($func);
        }
        return $self->SUPER::search_perlfunc($found_things, $pod);
    }
}

exit My::Pod::Perldoc->run;

__END__

=head1 NAME

p5doc - perldoc that backtracks through namespaces

=head1 DESCRIPTION

    This script will backtrack through the namespaces until a match is found.
    It is mostly useful when used with a text editor that allows searching for
    the current word. Example: 'Pod::Perldoc::searchfor' will return no
    results but this script will next try 'Pod::Perldoc', which does return
    a result.

    See L<cpandoc> and L<perldoc>.

=cut
