#!/bin/sh

# This script is meant to be run from cron. It:
#   - finds torrents under a directory (including its subdirectories) and
#     adds them to transmission, specifying the directory from where the
#     torrent was located to be the completed directory for the data
#   - throttles public torrents
#   - removes completed, stopped torrents
#   - removes idle, expired torrents
#   - verifies RAR archives with cksfv
#   - unrars RAR archives
#   - removes RAR archives after torrent has been removed
#
# TODO:
#   - make idle expiration test portable- don't rely on gnu date
#   - kill transmission if it's hanging so it can be restarted by some
#     external process (launchd, inetd, etc.)

VERBOSE=1
LOCK=/tmp/transmission-watchdog.lock
NETRC=~/.netrc
WATCH_DIR=~/Media/.
IDLE_EXPIRED_HOURS=24
PUBLIC_UP_RATE=5
PUBLIC_RATIO=0

set -o errexit
set -o nounset

has_cmd () { command -v "$@" >/dev/null 2>&1; }
warn    () { printf "$@" >&2; }

if has_cmd flock; then
    flock -nx "$LOCK" || exit
elif has_cmd shlock; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    shlock -f "$LOCK" -p $$ || exit
    trap 'rm -f "$LOCK"; exit' EXIT
elif has_cmd lockfile; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    lockfile -r 0 -l 300 "$LOCK" >/dev/null 2>&1 || exit
    trap 'rm -f "$LOCK"; exit' EXIT
else
   [ -e "$LOCK" ] && exit
   trap 'rm -f "$LOCK"; exit' EXIT HUP INT QUIT TERM
   touch "$LOCK"
fi

# Prefer the timeout program from GNU coreutils.
if   has_cmd timeout;  then :
elif has_cmd gtimeout; then timeout () { gtimeout "$@"; }
else
    # From "Beginning Portable Shell Scripting", 2008.
    timeout () {
        timeout=$1
        shift
        "$@" &
        child_pid=$!
        (
            trap 'kill -s TERM $sleep_pid 2>/dev/null; exit 0' TERM
            sleep "$timeout" &
            sleep_pid=$!
            wait $sleep_pid 2>/dev/null
            kill -s TERM $child_pid 2>/dev/null
            sleep 2
            kill -s KILL $child_pid 2>/dev/null
        ) &
        alarm_pid=$!
        wait $child_pid 2>/dev/null
        status=$?
        kill -s TERM $alarm_pid 2>/dev/null
        return $status
    }
fi

transmit () {
    # TODO: add retry and kill logic
    timeout 30 transmission-remote -N $NETRC "$@"
}

# Add any new torrent files to transmission.
find "$WATCH_DIR" -type f -name '*.torrent' | while IFS= read -r file; do
    dir=${file%/*}

    # transmission-remote doesn't yet allow setting the directory for only
    # the current torrent.
    transmit --download-dir "$dir"       >/dev/null 2>&1
    transmit --add "$file"               >/dev/null 2>&1
    transmit --download-dir "$WATCH_DIR" >/dev/null 2>&1
    rm -f "$file"

    [ 1 = "$VERBOSE" ] && printf "Added torrent: ${file##*/}\n"
done

# TODO: make this portable.
is_expired () {
    [ -z "$1" ] && return 1

    _expired=$(($IDLE_EXPIRED_HOURS * 3600))
    _now=$(gdate +%s)
    _started=$(gdate --date "$1" +%s)
    if [ -n "$2" ]; then
        _last_active=$(gdate --date "$2" +%s)
    else
        _last_active=0
    fi

    [ $(($_now - $_started))     -gt $_expired ] &&
    [ $(($_now - $_last_active)) -gt $_expired ] &&
    return 1
}

has_cmd unrar && HAS_UNRAR=1
has_cmd cksfv && HAS_CKSFV=1

do=0
transmit --torrent all --info | while IFS= read -r line; do
    val=${line##*: }
    case $line in
        '  Id: '?*)              id=$val          ;;
        '  Name: '?*)            name=$val        ;;
        '  State: '?*)           state=$val       ;;
        '  Location: '?*)        dir=$val         ;;
        '  Percent Done: '?*)    percent=$val     ;;
        '  Date started: '?*)    started=$val     ;;
        '  Latest activity: '?*) last_active=$val ;;
        '  Public torrent: '?*)  public=$val      ;;
        '  Upload Limit: '?*)    up_rate=$val
                                 do=1             ;;
    esac

    [ 1 != "$do" ] && continue;

    do=; last_dir=; removed=; unrarred=;

    if [ '100%' = "$percent" ]; then
        if [ 1 = "$HAS_UNRAR" ]; then
            find "$dir/$name" -type f -name '*.rar' | \
            while IFS= read -r file; do
                rar_dir=${file%/*}
                rar_file=${file##*/}
                [ "$rar_dir" = "$last_dir" ] && continue
                last_dir=$rar_dir
                unrarred_lock="$rar_dir/.$rar_file.unrarred"
                [ -e "$unrarred_lock" ] && continue

                sfv_file="${rar_file%.*}".sfv
                if [ 1 = "$HAS_CKSFV" ] && [ -e "$sfv_file" ]; then
                    if ! nice -n 15 cksfv -vg "$rar_dir/$sfv_file"; then
                        touch "$unrarred_lock"
                        if [ 1 = "$VERBOSE" ]; then
                            warn "Invalid RAR: ${rar_dir##~/}/$rar_file\n"
                        fi
                        continue
                    fi
                fi

                touch "$unrarred_lock"

                if ! nice -n 15 unrar x -inul -y -p- -o+ -r \
                        "$rar_dir/$rar_file" "$rar_dir"
                then
                    warn "Unable to extract RAR: ${rar_dir##~/}/$rar_file\n"
                    continue
                fi

                unrarred=1

                if [ 1 = "$VERBOSE" ]; then
                    printf "Unrarred %s/%s\n" "${rar_dir##~/}" "$rar_file"
                fi
            done
        fi

        if [ 'Idle' = "$state" ] && is_expired "$started" "$last_active"
        then
            transmit --torrent "$id" --remove >/dev/null 2>&1
            removed=1
            [ 1 = "$VERBOSE" ] && printf "Removed idle torrent: $name\n"
        elif [ 'Stopped' = "$state" ]; then
            transmit --torrent "$id" --remove >/dev/null 2>&1
            removed=1
            [ 1 = "$VERBOSE" ] && printf "Removed completed torrent: $name\n"
        fi
    fi
    if [ 1 = "$removed" ] && [ 1 = "$unrarred" ]; then
        find "$dir/$name" -type f -name '*.rar' -o -name '*.r[0-9]' -o \
            -name '*.r[0-9][0-9]' -o -name '*.r[0-9][0-9][0-9]' -o     \
            -name '*.sfv' -o -name '*.nfo' -print0 | xargs -0 rm -f
        [ 1 = "$VERBOSE" ] && printf "Removed RAR archives: $name\n"
    fi

    # TODO: treat demonoid.com tracker as public since ratios don't matter.
    if [ 'Yes' = "$public" ] && [ "$PUBLIC_UP_RATE" != "${up_rate%% *}" ]
    then
        transmit --torrent "$id" --torrent-uplimit "$PUBLIC_UP_RATE" \
            --seedratio "$PUBLIC_RATIO" >/dev/null 2>&1
        [ 1 = "$VERBOSE" ] && printf "Throttled public torrent: $name\n"
    fi
done
