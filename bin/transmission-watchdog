#!/bin/sh

# This script is meant to be run from cron. It:
#   - finds torrents under a directory (including its subdirectories) and
#     adds them to transmission, specifying the directory from where the
#     torrent was located to be the completed directory for the data
#   - removes torrents that have completed and stopped
#   - changes upload rate and ratio for public torrents
#
# TODO:
#   - unrar RAR archives
#   - kill transmission if it's hanging so it can be restarted by some
#     external process (launchd, inetd, etc.)

LOCK=/tmp/transmission-watchdog.lock
NETRC=~/.netrc
WATCH_DIR=~/Media/.
PUBLIC_UP_RATE=5
PUBLIC_RATIO=0
VERBOSE=0

[ 1 != "$CRON" ] && VERBOSE=1

set -e

if ! command -v transmission-remote >/dev/null 2>&1; then
    echo "Can't find transmission-remote" >&2
    exit 1
fi

if command -v flock >/dev/null 2>&1; then
    flock -nx "$LOCK" || exit
elif command -v shlock >/dev/null 2>&1; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    shlock -f "$LOCK" -p $$ || exit
    trap 'rm -f "$LOCK"; exit' EXIT
else
    echo "Put a leash on the watchdog- install flock or shlock" >&2
fi

# Prefer the timeout program from GNU coreutils.
if command -v timeout >/dev/null 2>&1; then
    :
elif command -v gtimeout >/dev/null 2>&1; then
    timeout () {
        gtimeout $@
    }
else
    # From "Beginning Portable Shell Scripting", 2008.
    timeout () {
        timeout=$1
        shift
        "$@" &
        child_pid=$!
        (
            trap 'kill -TERM $sleep_pid 2>/dev/null ; exit 0' TERM
            sleep "$timeout" &
            sleep_pid=$!
            wait $sleep_pid 2>/dev/null
            kill -TERM $child_pid 2>/dev/null
            sleep 2
            kill -KILL $child_pid 2>/dev/null
        ) &
        alarm_pid=$!
        wait $child_pid 2>/dev/null
        status=$?
        kill -TERM $alarm_pid 2>/dev/null
        return $status
    }
fi

transmit () {
    timeout 30 transmission-remote -N $NETRC $@
    # TODO: add retry and kill logic
}

# Add any new torrent files to transmission, then archive them.
find "$WATCH_DIR" -type f -name '*.torrent' -print0 | \
while read -d $'\0' file; do
    dir=${file%/*}

    # transmission-remote doesn't yet allow setting the directory for only
    # the current torrent.
    trap 'transmit -w ~/Media/.' ERR
    transmit -w "$dir"    >/dev/null 2>&1
    transmit -a "$file"   >/dev/null 2>&1
    transmit -w ~/Media/. >/dev/null 2>&1

    mv -f "$file" ~/Downloads/torrents/.
done

if command -v unrar >/dev/null 2>&1; then
    HAS_UNRAR=1
fi

transmit -t all -i | \
while read line; do
    val=${line##*: }
    case $line in
        'Id: '?*)             id=$val            ;;
        'Name: '?*)           name=$val          ;;
        'State: '?*)          state=$val         ;;
        'Location: '?*)       dir=$val           ;;
        'Percent Done: '?*)   percent=$val       ;;
        'Public torrent: '?*) public=$val        ;;
        'Upload Limit: '?*)   up_rate=${val%% *}
                              do=1               ;;
    esac

    [ -z $do ] && continue; do=''

    if [ '100%' = "$percent" ]; then
        # TODO: Unrar any RAR archives.
        # if [ 1 = "$HAS_UNRAR" ]; then
            # find "$dir/$name" -type f -name '*.rar' -print0 | \
            # while read -d $'\0' file; do
                # unrar x -y -p- -o+ "$file"
            # done
            # [ 1 = "$VERBOSE" ] && echo "Unrarred $dir/$name"
        # fi

        if [ 'Stopped' = "$state" ]; then
            # Remove completed and stopped torrents.
            transmit -t "$id" -r >/dev/null 2>&1
            [ 1 = "$VERBOSE" ] && echo "Removed completed torrent: $name"
            continue
        fi
    fi

    if [ 'Yes' = "$public" ] && [ "$PUBLIC_UP_RATE" != "$up_rate" ]; then
        # Change the upload rate and ratio for public torrents.
        echo "$public"
        echo "$PUBLIC_UP_RATE"
        echo "$up_rate"
        transmit -t "$id" -tu "$PUBLIC_UP_RATE" -sr "$PUBLIC_RATIO" \
            >/dev/null 2>&1
        [ 1 = "$VERBOSE" ] && echo "Throttled public torrent: $name"
    fi
done
