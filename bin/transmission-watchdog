#!/bin/sh

# This script is meant to be run from cron. It:
#   - finds torrents under a directory (including its subdirectories) and
#     adds them to transmission, specifying the directory from where the
#     torrent was located to be the completed directory for the data
#   - deselects sample files
#   - throttles public torrents
#   - removes certain "bad" trackers from torrents
#   - labels files of seeding torrents
#   - removes completed, stopped torrents
#   - verifies RAR archives with cksfv
#   - unrars RAR archives
#   - removes RAR archives after torrent has been removed
#
# TODO:
#   - log messages to syslog with `logger` if available
#   - use getopts to accept command-line options
#   - kill transmission if it's hanging so it can be restarted by some
#     external process (launchd, inetd, etc.)

WATCH_DIR=$HOME/Media/.
NETRC=$HOME/.netrc
GROWL_ARGS=

PROG=${0##*/}
LOCK="/tmp/$PROG.lock"
LOG="/tmp/$PROG.log"

PUBLIC_UP_RATE=2
PUBLIC_RATIO=0

set -o errexit
set -o nounset

has_cmd () { command -v "$@" >/dev/null 2>&1; }

if has_cmd flock; then
    flock -nx "$LOCK" || exit
else
    trap 'status=$?; rm -f "$LOCK"; exit $status' HUP INT QUIT TERM
    if has_cmd shlock; then
        shlock -f "$LOCK" -p $$ || exit
    elif has_cmd lockfile; then
        lockfile -r 0 -l 300 "$LOCK" >/dev/null 2>&1 || exit
    else
        ln -s /dev/null "$LOCK" 2>/dev/null || exit
    fi
    trap 'rm -f "$LOCK"; exit' EXIT
fi

if has_cmd growlnotify; then
    growl () {
        growlnotify -t "$PROG" $GROWL_ARGS -m "$@" >/dev/null 2>&1
    }
else
    growl () { :; }
fi
log () {
    printf "[%s] %s\n" "$(date +%F\ %T)" "$@" >>"$LOG"
    [ -t 0 ] && printf "%s\n" "$@"
    growl "$@"
}
err () {
    printf "[%s] %s\n" "$(date +%F\ %T)" "$@" >>"$LOG" 2>&1
    [ -t 1 ] && printf "%s\n" "$@" >&2
    SAVED_GROWL_ARGS=$GROWL_ARGS; GROWL_ARGS="$GROWL_ARGS -s"
    growl "$@"
    GROWL_ARGS=$SAVED_GROWL_ARGS
}

real_dir () {
    _real_dir=
    cd -P -- "$1" 2>/dev/null && _real_dir=$(pwd -P)
}

real_dir "$WATCH_DIR" && WATCH_DIR=$_real_dir || {
    err "WATCH_DIR directory $WATCH_DIR does not exist" 
    exit -1
}

if   has_cmd timeout; then :
elif has_cmd gtimeout; then timeout () { gtimeout "$@"; }
else
    timeout () {
        timeout=$1
        shift
        "$@" &
        child_pid=$!
        (
            sleep "$timeout" &
            sleep_pid=$!
            trap 'kill -s TERM $sleep_pid 2>/dev/null; exit 0' TERM
            wait $sleep_pid 2>/dev/null
            kill -s TERM $child_pid 2>/dev/null
            sleep 2
            kill -s KILL $child_pid 2>/dev/null
        ) &
        alarm_pid=$!
        wait $child_pid 2>/dev/null
        status=$?
        kill -s TERM $alarm_pid 2>/dev/null
        return $status
    }
fi

remote () {
    # TODO: add retry and kill logic
    exec 3>&1 4>&2
    if ! error=$(
        { timeout 30 transmission-remote -N "$NETRC" "$@" 2>&4 1>&3; } 4>&1
    ); then
        case $error in
            *"Couldn't connect to server")
                err "$error"
                exit 1
        esac
    fi
    exec 3>&- 4>&-
    printf "$error" >&2
}

IFS=$(printf "\n\t")

# Add any new torrent files to transmission.
for file in $(
    find "$WATCH_DIR" -type f -name "*.torrent" \! -size 0 2>/dev/null
)
do
    dir=${file%/*}

    # Parse the debug output.
    # Use the torrent hash because the ids are not persistent across sessions.
    result=
    response=$(remote --debug --add "$file" --download-dir "$dir" 2>&1)
    for line in $response; do
        case $line in '{"arguments":{'*'"result":'*) result=$line; esac
    done

    case $result in
        '') continue ;;
        '{"arguments":{"torrent-added":{"hashString":'*)
            SAVED_IFS=$IFS; IFS='"'; set -- $result; IFS=$SAVED_IFS
            hash=$8;
            rm -f "$file" ;;
        '{"arguments":{},"result":"duplicate torrent"'*)
            err "Skipping already added torrent: $file"
            rm -f "$file"
            continue ;;
        *)
            err "Failed to add torrent: $file"
            mv -f "$file" "$file.failed"
            continue
    esac

    for line in $(remote --torrent "$hash" --info); do
        case $line in
            '  Public torrent: '?*) public=${line#*: } ;;
            '  Name: '?*)           name=${line#*: }
        esac
    done

    log "Added torrent: $name"

    force_public=0
    for line in $(remote --torrent "$hash" --info-trackers); do
        SAVED_IFS=$IFS; IFS=' :/'; set -- $line; IFS=$SAVED_IFS
        [ 6 -le $# ] && [ Tracker = $1 ] || continue
        id=$2 tracker=$6
        case $id in '' | *[!0-9]*) continue; esac
        case $tracker in
            tracker.openbittorrent.com | \
            tracker.publicbt.*         | \
            inferno.demonoid.*         | \
            *.prq.to                   | \
            *.h33t.com                 | \
            *.1337x.org                | \
            www.mvgroup.org)
                force_public=1 ;;
            *.hexagon.cc               | \
            *.thepiratebay.org         | \
            *.onion                    | \
            *.tor2web.com)
                remote --torrent "$hash" --tracker-remove "$id" >/dev/null
        esac
    done

    if [ Yes = "$public" ] || [ 1 = "${force_public:-0}" ]; then
        # Throttle torrent.
        remote --torrent "$hash" --uplimit "$PUBLIC_UP_RATE" \
            --seedratio "$PUBLIC_RATIO" >/dev/null

        # Deselect sample files and subs for tv series.
        ids=; count=0
        for line in $(remote --torrent "$hash" --files); do
            # Skip header lines
            [ $count -lt 2 ] && count=$((count+1)) && continue
            deselect=
            case $line in
                *[/.\ ][Ss][Aa][Mm][Pp][Ll][Ee].avi) deselect=1 ;;
                */[Ss][Aa][Mm][Pp][Ll][Ee]/*)        deselect=1 ;;
                */[Ss][Uu][Bb][Ss]/*)
                    case $dir/ in "$WATCH_DIR"/TV/*) deselect=1; esac
            esac
            if [ "$deselect" ]; then
                SAVED_IFS=$IFS; IFS=': '; set -- $line; IFS=$SAVED_IFS
                [ "$ids" ] && ids=$ids,$1 || ids=$1
            fi
        done
        [ "$ids" ] && remote --torrent "$hash" --no-get "$ids" >/dev/null
    fi
done

has_cmd unrar    && HAS_UNRAR=1    || HAS_UNRAR=0
has_cmd cksfv    && HAS_CKSFV=1    || HAS_CKSFV=0
has_cmd setlabel && HAS_SETLABEL=1 || HAS_SETLABEl=0

for line in $(remote --torrent all --info); do
    val=${line#*: }
    case $line in
        '  Name: '?*)         name=$val    ;;
        '  Hash: '?*)         hash=$val    ;;
        '  State: '?*)        state=$val   ;;
        '  Location: '?*)     dir=$val     ;;
        '  Percent Done: '?*) percent=$val
                              do=1
    esac

    [ 1 != "${do:-0}" ] && continue
    [ '100%' != "$percent" ] && continue
    case $state in Verifying*) continue; esac

    do=0; dir_ok=0; last_dir=; last_file_base=; has_rar=0

    # Verify directory is valid and in expected location.
    real_dir "$dir" && dir=$_real_dir || dir=
    case $dir/ in "$WATCH_DIR"/*) dir_ok=1; esac

    # Multiple torrents could write to the same location, so a single lock
    # file per torrent location will not suffice; each RAR archive requires
    # its own lock file.
    if [ 1 = $HAS_UNRAR ] && [ 1 = $dir_ok ]; then
        for file in $(find "$dir/$name" -type f -name *.rar 2>/dev/null); do
            has_rar=1
            rar_dir=${file%/*}
            rar_file=${file##*/}
            rar_file_base=${rar_file%.*}
            case "${rar_file_base##*.}" in
                part[0-9]*) rar_file_base=${rar_file_base%.*}
            esac

            if [ "$rar_dir" = "$last_dir" ]; then
                # Skip parts of last processed RAR archive.
                [ "$rar_file_base" = "$last_file_base" ] && continue
            fi
            last_dir=$rar_dir
            last_file_base=$rar_file_base
            unrarred_lock=$rar_dir/.$rar_file_base.unrarred
            [ -e "$unrarred_lock" ] && continue

            sfv_file=$rar_file_base.sfv
            display_path=${rar_dir##$WATCH_DIR/}/$rar_file
            if [ 1 = $HAS_CKSFV ] && [ -e "$rar_dir/$sfv_file" ]; then
                if ! cksfv -qg "$rar_dir/$sfv_file"; then
                    touch "$unrarred_lock"
                    err "Invalid RAR: $display_path"
                    continue
                fi
            fi

            touch "$unrarred_lock"

            if ! unrar x -inul -y -p- -o+ -r "$rar_dir/$rar_file" "$rar_dir"
            then
                err "Unable to extract RAR: $display_path"
                continue
            fi

            log "Unrarred $display_path"
        done
    fi

    [ Finished = "$state" ] || continue

    # Remove each of the RAR files listed in the torrent.
    # NOTE: this assumes files are returned alphabetically sorted.
    if [ 1 = $has_rar ]; then
        count=0; last_dir=; last_file_base=
        remote --torrent "$hash" --files |
        while IFS=' ' read -r _ _ _ _ _ _ file; do
            # Skip header lines
            [ $count -lt 2 ] && count=$((count+1)) && continue

            # Skip any non-RAR file.
            case $file in
                *.rar|*.sfv|*.r[0-9]|*.r[0-9][0-9]|*.r[0-9][0-9][0-9]) ;;
                *) continue
            esac

            # Verify directory is valid and in expected location.
            rar_dir=$dir/${file%/*}
            real_dir "$rar_dir" && rar_dir=$_real_dir || rar_dir=
            case $rar_dir/ in "$WATCH_DIR"/*) ;; *) continue; esac

            # Remove RAR part.
            rar_file=${file##*/}
            rm -f "$rar_dir/$rar_file"

            # Remove RAR lock file.
            rar_file_base=${rar_file%.*}
            case "${rar_file_base##*.}" in
                part[0-9]*) rar_file_base=${rar_file_base%.*}
            esac
            if [ "$rar_dir" = "$last_dir" ]; then
                # Skip parts of last processed RAR archive.
                [ "$rar_file_base" = "$last_file_base" ] && continue
            fi
            last_dir=$rar_dir
            last_file_base=$rar_file_base
            rm -f "$rar_dir/.$rar_file_base.unrarred"
        done
        log "Removed RAR: $name"
    fi

    if [ -d "$dir/$name" ]; then
        ! find "$dir/$name" -type f \(                             \
            -name *.message -o -name *.localized -o                \
            -name *.part -o -name *.txt -o -name *.[Nn][Ff][Oo] -o \
            -name [Ss][Aa][Mm][Pp][Ll][Ee].avi -o                  \
            -name *[/.\ ][Ss][Aa][Mm][Pp][Ll][Ee].avi              \
            \) -exec rm -f {} + 2>/dev/null
        ! find "$dir/$name/" -type d -depth \
            -name [Ss][Aa][Mm][Pp][Ll][Ee]  \
            -exec rm -rf {} + 2>/dev/null
        case $dir/ in "$WATCH_DIR"/TV/*)
            ! find "$dir/$name/" -type d -depth -name [Ss][Uu][Bb][Ss] \
                -exec rm -rf {} + 2>/dev/null
            ! find "$dir/$name/" -type f                               \
                -name \( -name *.srt -o -name *.idx -o -name *.sub \)  \
                -exec rm -f {} + 2>/dev/null
        esac

    fi

    # Mark files a different color in Finder to indicate they are
    # finished seeding and can safely be deleted.
    if [ 1 = $HAS_SETLABEL ]; then
        ! find "$dir/$name" -exec setlabel -s Red {} + 2>/dev/null
    fi

    remote --torrent "$hash" --remove >/dev/null
    log "Removed torrent: $name"
done

# Remove empty directories.
! find "$WATCH_DIR" -type f -name '.DS_Store' -exec rm -f {} + 2>/dev/null
! find "$WATCH_DIR" -type d -depth -exec rmdir {} + 2>/dev/null
