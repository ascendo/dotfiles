#!/bin/sh

# This script is meant to be run from cron. It:
#   - finds torrents under a directory (including its subdirectories) and
#     adds them to transmission, specifying the directory from where the
#     torrent was located to be the completed directory for the data
#   - removes completed, stopped torrents
#   - removes idle, expired torrents
#   - changes upload rate and ratio for public torrents
#
# TODO:
#   - unrars RAR archives
#   - kills transmission if it's hanging so it can be restarted by some
#     external process (launchd, inetd, etc.)

VERBOSE=0
LOCK=/tmp/transmission-watchdog.lock
NETRC=~/.netrc
WATCH_DIR=~/Media/.
ARCHIVE_DIR=~/Downloads/torrents/.
IDLE_EXPIRED_HOURS=24
PUBLIC_UP_RATE=5
PUBLIC_RATIO=0

[ 1 != "$CRON" ] && VERBOSE=1

set -e

if ! command -v transmission-remote >/dev/null 2>&1; then
    echo "Can't find transmission-remote" >&2
    exit 1
fi

if command -v flock >/dev/null 2>&1; then
    flock -nx "$LOCK" || exit
elif command -v shlock >/dev/null 2>&1; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    shlock -f "$LOCK" -p $$ || exit
    trap 'rm -f "$LOCK"; exit' EXIT
elif command -v lockfile >/dev/null 2>&1; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    lockfile -r 0 -l 300 "$LOCK" >/dev/null 2>&1 || exit
    trap 'rm -f "$LOCK"; exit' EXIT
else
    echo "Put a leash on the watchdog- install flock, shlock or lockfile" >&2
fi

# Prefer the timeout program from GNU coreutils.
if command -v timeout >/dev/null 2>&1; then
    :
elif command -v gtimeout >/dev/null 2>&1; then
    timeout () { gtimeout "$@"; }
else
    # From "Beginning Portable Shell Scripting", 2008.
    timeout () {
        timeout=$1
        shift
        "$@" &
        child_pid=$!
        (
            trap 'kill -s TERM $sleep_pid 2>/dev/null; exit 0' TERM
            sleep "$timeout" &
            sleep_pid=$!
            wait $sleep_pid 2>/dev/null
            kill -s TERM $child_pid 2>/dev/null
            sleep 2
            kill -s KILL $child_pid 2>/dev/null
        ) &
        alarm_pid=$!
        wait $child_pid 2>/dev/null
        status=$?
        kill -s TERM $alarm_pid 2>/dev/null
        return $status
    }
fi

transmit () {
    # TODO: add retry and kill logic
    timeout 30 transmission-remote -N $NETRC "$@"
}

# Add any new torrent files to transmission, then archive them.
find "$WATCH_DIR" -type f -name '*.torrent' | \
while IFS= read -r file; do
    dir=${file%/*}

    # transmission-remote doesn't yet allow setting the directory for only
    # the current torrent.
    trap 'transmit --download-dir "$WATCH_DIR"' ERR
    transmit --download-dir "$dir"       >/dev/null 2>&1
    transmit --add "$file"               >/dev/null 2>&1
    transmit --download-dir "$WATCH_DIR" >/dev/null 2>&1

    mv -f "$file" "$ARCHIVE_DIR"
done

# TODO: make this portable.
is_idle_expired () {
    [ -z "$1" ] && return 1
    _now=$(gdate +%s)
    _last=$(gdate --date "$1" +%s)
    [ $(($_now - $_last)) -lt $(($IDLE_EXPIRED_HOURS * 3600)) ] && return 1
}

transmit --torrent all --info | \
while IFS= read -r line; do
    val=${line##*: }
    case $line in
        'Id: '?*)              id=$val          ;;
        'Name: '?*)            name=$val        ;;
        'State: '?*)           state=$val       ;;
        'Location: '?*)        dir=$val         ;;
        'Percent Done: '?*)    percent=$val     ;;
        'Latest activity: '?*) last_active=$val ;;
        'Public torrent: '?*)  public=$val      ;;
        'Upload Limit: '?*)    up_rate=$val
                               do=1             ;;
    esac

    [ 1 != "$do" ] && continue; do=0

    if [ '100%' = "$percent" ]; then
        if [ 'Idle' = "$state" ]; then
            # Determine if torrent has expired due to inactivity.
            if is_idle_expired "$last_active"; then
                transmit --torrent "$id" --remove >/dev/null 2>&1
                [ 1 = "$VERBOSE" ] && echo "Stopping idle torrent: $name"
            fi
        elif [ 'Stopped' = "$state" ]; then
            # Remove completed and stopped torrents.
            transmit --torrent "$id" --remove >/dev/null 2>&1
            [ 1 = "$VERBOSE" ] && echo "Removed completed torrent: $name"

            # TODO: Unrar any RAR archives.
            # if command -v unrar >/dev/null 2>&1; then
                # find "$dir/$name" -type f -name '*.rar' | \
                # while IFS= read -r file; do
                    # dir=${file%/*}
                    # unrar x -y -p- -o+ "$file"
                # done
                # [ 1 = "$VERBOSE" ] && echo "Unrarred $dir/$name"
            # fi

            continue
        fi
    fi

    # TODO: treat demonoid.com as public
    if [ 'Yes' = "$public" ] && [ "$PUBLIC_UP_RATE" != "${up_rate%% *}" ]
    then
        transmit --torrent "$id" --torrent-uplimit "$PUBLIC_UP_RATE" \
            --seedratio "$PUBLIC_RATIO" >/dev/null 2>&1
        [ 1 = "$VERBOSE" ] && echo "Throttled public torrent: $name"
    fi
done
