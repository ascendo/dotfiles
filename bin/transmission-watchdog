#!/bin/sh

# This script is meant to be run from cron. It:
#   - finds torrents under a directory (including its subdirectories) and
#     adds them to transmission, specifying the directory from where the
#     torrent was located to be the completed directory for the data
#   - deselects sample files
#   - throttles public torrents
#   - removes completed, stopped torrents
#   - removes idle, expired torrents
#   - verifies RAR archives with cksfv
#   - unrars RAR archives
#   - removes RAR archives after torrent has been removed
#
# TODO:
#   - use getopts to accept command-line options
#   - kill transmission if it's hanging so it can be restarted by some
#     external process (launchd, inetd, etc.)

VERBOSE=1
LOCK=/tmp/transmission-watchdog.lock
NETRC=~/.netrc
WATCH_DIR=~/Media/.
IDLE_EXPIRED_HOURS=24
PUBLIC_UP_RATE=5
PUBLIC_RATIO=0

set -o errexit
set -o nounset

IFS=$(printf "\n\t")

has_cmd () { command -v "$@" >/dev/null 2>&1; }
warn    () { printf "$@" >&2; }

if has_cmd flock; then
    flock -nx "$LOCK" || exit
elif has_cmd shlock; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    shlock -f "$LOCK" -p $$ || exit
    trap 'rm -f "$LOCK"; exit' EXIT
elif has_cmd lockfile; then
    trap 'rm -f "$LOCK"; exit' HUP INT QUIT TERM
    lockfile -r 0 -l 300 "$LOCK" >/dev/null 2>&1 || exit
    trap 'rm -f "$LOCK"; exit' EXIT
else
    ln -s /dev/null "$LOCK" 2>/dev/null || exit
    trap 'rm -f "$LOCK"; exit' EXIT HUP INT QUIT TERM
fi

timeout () {
    timeout=$1
    shift
    "$@" &
    child_pid=$!
    (
        sleep "$timeout" &
        sleep_pid=$!
        trap 'kill -s TERM $sleep_pid 2>/dev/null; exit 0' TERM
        wait $sleep_pid 2>/dev/null
        kill -s TERM $child_pid 2>/dev/null
        sleep 2
        kill -s KILL $child_pid 2>/dev/null
    ) &
    alarm_pid=$!
    wait $child_pid 2>/dev/null
    status=$?
    kill -s TERM $alarm_pid 2>/dev/null
    return $status
}

remote () {
    # TODO: add retry and kill logic
    timeout 30 transmission-remote -N $NETRC "$@"
}

# Add any new torrent files to transmission.
for file in $(find "$WATCH_DIR" -type f -name '*.torrent'); do
    dir=${file%/*}

    # This sets the global directory; it must be reset later.
    remote --download-dir "$dir" >/dev/null

    # Successfully adding a torrent prints no useful information, so parse
    # the debug output. Use the torrent hash because the ids are not
    # persistent across sessions.
    hash=$(
        remote --debug --add "$file" 2>&1 |
        awk -F'"' '/^{"arguments":{"torrent-added":/{print$8;exit}'
    )

    remote --download-dir "$WATCH_DIR" >/dev/null
    rm -f "$file"

    [ -n "$hash" ] || continue

    [ 1 = "$VERBOSE" ] && printf "Added torrent ${hash}: ${file##*/}\n"

    ids=$(
        remote --torrent "$hash" --files | \
        sed -n 's/^ *\([0-9]\{1,\}\):.*\/Sample\/.*/\1/p' | \
        paste -d ',' -s -
    )
    [ -n "$ids" ] && remote --torrent "$hash" --no-get "$ids" >/dev/null
done

epoch () {
    SAVED_IFS="$IFS"
    IFS=" "; set -f -- $1; m=$2; d=$3; time=$4; y=$5
    IFS=":"; set -f -- $time; hh=${1#0}; mm=${2#0}; ss=${3#0}
    IFS="$SAVED_IFS"

    case $m in
        Jan) m=1 ;;  Feb) m=2  ;;  Mar) m=3  ;;  Apr) m=4  ;;
        May) m=5 ;;  Jun) m=6  ;;  Jul) m=7  ;;  Aug) m=8  ;;
        Sep) m=9 ;;  Oct) m=10 ;;  Nov) m=11 ;;  Dec) m=12 ;;
    esac

    [ 2 -lt "$m" ] && : $((m+=12)) && : $((y-=1))

    _epoch=$(( 86400*($y*365 + $y/4 - $y/100 + $y/400 + ($m+1)*306001/10000 +
        $d-719591) + $hh*3600 + $mm*60 + $ss ))
}

now=
is_expired () {
    [ -z "$1" ] || [ -z "$2" ] && return 1

    if [ -z "$now" ]; then
        expired=$(($IDLE_EXPIRED_HOURS * 3600))
        epoch "$(date '+%a %b %e %H:%M:%S %Y')"
        now=$_epoch
    fi

    epoch "$1"; _started=$_epoch
    epoch "$2"; _finished=$_epoch

    # The start date resets when a torrent is restarted (pause/start or
    # transmission itself restarts).
    if [ "$_started" -gt "$_finished" ]; then
        [ $(($now - $_finished)) -gt "$expired" ] && return 0
    else
        [ $(($now - $_started)) -gt "$expired" ] && return 0
    fi
    return 1
}

real_dir () {
    real_dir=
    cd -P -- "$1" && _real_dir="$(pwd -P)"
}

real_dir "$WATCH_DIR" && WATCH_DIR="$_real_dir"

has_cmd unrar && HAS_UNRAR=1
has_cmd cksfv && HAS_CKSFV=1

do=0
for line in $(remote --torrent all --info); do
    val=${line##*: }
    case "$line" in
        '  Hash: '?*)            hash=$val        ;;
        '  Name: '?*)            name=$val        ;;
        '  State: '?*)           state=$val       ;;
        '  Location: '?*)        dir=$val         ;;
        '  Percent Done: '?*)    percent=$val     ;;
        '  Ratio Limit: '?*)     ratio_limit=$val ;;
        '  Date finished: '?*)   finished=$val    ;;
        '  Date started: '?*)    started=$val     ;;
        '  Public torrent: '?*)  public=$val      ;;
        '  Upload Limit: '?*)    up_rate=$val
                                 do=1             ;;
    esac

    [ 1 != "$do" ] && continue

    do=; last_dir=; unrarred_lock=

    if [ '100%' = "$percent" ]; then
        if [ 1 = "$HAS_UNRAR" ]; then
            # Verify directory is valid and in expected location.
            real_dir "$dir" >/dev/null 2>&1 && dir="$_real_dir"
            case $dir in
                $WATCH_DIR) ;; $WATCH_DIR/*) ;; *) continue ;;
            esac

            for file in $(find "$dir/$name" -type f -name '*.rar' 2>/dev/null)
            do
                rar_dir=${file%/*}
                rar_file=${file##*/}
                [ "$rar_dir" = "$last_dir" ] && continue
                last_dir=$rar_dir
                unrarred_lock=$rar_dir/.$rar_file.unrarred
                [ -e "$unrarred_lock" ] && continue

                sfv_file=${rar_file%.*}.sfv
                if [ 1 = "$HAS_CKSFV" ] && [ -e "$rar_dir/$sfv_file" ]; then
                    if ! nice -n 15 cksfv -qg "$rar_dir/$sfv_file"; then
                        touch "$unrarred_lock"
                        if [ 1 = "$VERBOSE" ]; then
                            warn "Invalid RAR: ${rar_dir##$WATCH_DIR/}/$rar_file\n"
                        fi
                        continue
                    fi
                fi

                touch "$unrarred_lock"

                if ! nice -n 15 unrar x -inul -y -p- -o+ -r \
                    "$rar_dir/$rar_file" "$rar_dir"
                then
                    warn "Unable to extract RAR: ${rar_dir##$WATCH_DIR/}/$rar_file\n"
                    continue
                fi

                if [ 1 = "$VERBOSE" ]; then
                    printf "Unrarred %s/%s\n" "${rar_dir##$WATCH_DIR/}" "$rar_file"
                fi
            done
        fi

        if ([ 'Idle' = "$state" ] && is_expired "$started" "$finished") ||
           ([ 'Stopped' = "$state" ] && [ 'Unlimited' = "$ratio_limit" ])
        then
            remote --torrent "$hash" --remove >/dev/null
            [ 1 = "$VERBOSE" ] && printf "Removed torrent: $name\n"

            if [ -n "$unrarred_lock" ]; then
                # Negate the return status to avoid triggering ERR.
                ! find "$dir/$name" -type f \( -name '*.rar' -o             \
                    -name '*.r[0-9]' -o -name '*.r[0-9][0-9]' -o            \
                    -name '*.r[0-9][0-9][0-9]' -o -name '*.sfv' -o          \
                    -name '*.nfo' -o -name '.DS_Store' -o -name '*.part' -o \
                    -name '.*.unrarred' \) -exec rm -f {} \; 2>/dev/null
                ! find "$dir/$name/"[Ss]ample -type f -exec rm -f {} \; \
                    2>/dev/null
                ! find "$dir/$name" -type d -depth -exec rmdir {} \; \
                    2>/dev/null
                [ 1 = "$VERBOSE" ] && printf "Removed RAR archive: $name\n"
            fi
        fi
    fi

    # TODO: treat demonoid.com tracker as public since ratios don't matter.
    if [ 'Yes' = "$public" ] && [ "$PUBLIC_UP_RATE" != "${up_rate%% *}" ]
    then
        remote --torrent "$hash" --torrent-uplimit "$PUBLIC_UP_RATE" \
            --seedratio "$PUBLIC_RATIO" >/dev/null
        [ 1 = "$VERBOSE" ] && printf "Throttled public torrent: $name\n"
    fi
done
